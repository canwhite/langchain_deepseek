from tool import get_completion
'''
# prompt 原则, 主要是是清晰和思考
'''


'''
============原则一：编写清晰具体的指令===================
''' 

# ----------1) 使用分隔符清晰的表示prompt的不同部分----------------
# 你可以选择用 ```，"""，< >，<tag> </tag>，: 等做分隔符，只要能明确起到隔断作用即可。
text = f"""
您应该提供尽可能清晰、具体的指示，以表达您希望模型执行的任务。\
这将引导模型朝向所需的输出，并降低收到无关或不正确响应的可能性。\
不要将写清晰的提示词与写简短的提示词混淆。\
在许多情况下，更长的提示词可以为模型提供更多的清晰度和上下文信息，从而导致更详细和相关的输出。
"""

# 需要总结的文本内容
# f 字符串（f-string）是 Python 3.6 引入的一种字符串格式化方法，
# 允许在字符串中嵌入表达式。
# 使用 f 字符串时，可以在字符串前加上 'f' 或 'F'，然后在字符串中使用花括号 {} 来嵌入变量或表达式。

# 指令内容，使用 ``` 来分隔指令和待总结的内容
prompt = f"""
把用三个反引号括起来的文本总结成一句话。
```{text}```
"""


# -------------2)寻求结构化的输出-----------------
prompt = f"""
请生成包括书名、作者和类别的三本虚构的、非真实存在的中文书籍清单，\
并以 JSON 格式提供，其中包含以下键:book_id、title、author、genre。
"""




# -------------3)要求模型检查是否满足条件-----------------
text_1 = f"""
泡一杯茶很容易。首先，需要把水烧开。\
在等待期间，拿一个杯子并把茶包放进去。\
一旦水足够热，就把它倒在茶包上。\
等待一会儿，让茶叶浸泡。几分钟后，取出茶包。\
如果您愿意，可以加一些糖或牛奶调味。\
就这样，您可以享受一杯美味的茶了。
"""
prompt = f"""
您将获得由三个引号括起来的文本。\
如果它包含一系列的指令，则需要按照以下格式重新编写这些指令：

第一步 - ...
第二步 - ...
...
第N步 - ...

如果文本中不包含一系列的指令，则直接写“未提供步骤”。"
\"\"\"{text_1}\"\"\"
"""


# -------------4)提供少量示例-----------------
#< >就是上边所说的标签 
prompt = f"""
您的任务是以一致的风格回答问题。

<孩子>: 请教我何为耐心。

<祖父母>: 挖出最深峡谷的河流源于一处不起眼的泉眼；最宏伟的交响乐从单一的音符开始；最复杂的挂毯以一根孤独的线开始编织。

<孩子>: 请教我何为韧性。
"""



'''
==================原则二：给模型时间去思考=====================
我们应通过 Prompt 指引语言模型进行深入思考。
可以要求其先列出对问题的各种看法，说明推理依据，然后再得出最终结论。
在 Prompt 中添加逐步推理的要求，能让语言模型投入更多时间逻辑思维，
输出结果也将更可靠准确
'''


# -------------1)指定完成任务所需的步骤-----------------
text = f"""
在一个迷人的村庄里，兄妹杰克和吉尔出发去一个山顶井里打水。\
他们一边唱着欢乐的歌，一边往上爬，\
然而不幸降临——杰克绊了一块石头，从山上滚了下来，吉尔紧随其后。\
虽然略有些摔伤，但他们还是回到了温馨的家中。\
尽管出了这样的意外，他们的冒险精神依然没有减弱，继续充满愉悦地探索。
"""
# example 1
prompt_1 = f"""
执行以下操作：
1-用一句话概括下面用三个反引号括起来的文本。
2-将摘要翻译成英语。
3-在英语摘要中列出每个人名。
4-输出一个 JSON 对象，其中包含以下键：english_summary，num_names。

请用换行符分隔您的答案。

Text:
```{text}```
"""

# 改进：我们将Prompt加以改进，该 Prompt 前半部分不变，同时确切指定了输出的格式。
prompt_2 = f"""
1-用一句话概括下面用<>括起来的文本。
2-将摘要翻译成英语。
3-在英语摘要中列出每个名称。
4-输出一个 JSON 对象，其中包含以下键：English_summary，num_names。

请使用以下格式：
文本：<要总结的文本>
摘要：<摘要>
翻译：<摘要的翻译>
名称：<英语摘要中的名称列表>
输出 JSON：<带有 English_summary 和 num_names 的 JSON>

Text: <{text}>
"""
# response = get_completion(prompt_2)
# print("prompt 2:")
# print(response)





# -------------2)指导模型在下结论之前找出一个自己的解法-----------------
prompt = f"""
判断学生的解决方案是否正确。

问题:
我正在建造一个太阳能发电站，需要帮助计算财务。

    土地费用为 100美元/平方英尺
    我可以以 250美元/平方英尺的价格购买太阳能电池板
    我已经谈判好了维护合同，每年需要支付固定的10万美元，并额外支付每平方英尺10美元
    作为平方英尺数的函数，首年运营的总费用是多少。

学生的解决方案：
设x为发电站的大小，单位为平方英尺。
费用：

    土地费用：100x
    太阳能电池板费用：250x
    维护费用：100,000美元+100x
    总费用：100x+250x+100,000美元+100x=450x+100,000美元
"""


# 改进：我们通过添加一个提示来指导模型找出自己的解法。
prompt = f"""
请判断学生的解决方案是否正确，请通过如下步骤解决这个问题：

步骤：

    首先，自己解决问题。
    然后将您的解决方案与学生的解决方案进行比较，对比计算得到的总费用与学生计算的总费用是否一致，并评估学生的解决方案是否正确。
    在自己完成问题之前，请勿决定学生的解决方案是否正确。

使用以下格式：

    问题：问题文本
    学生的解决方案：学生的解决方案文本
    实际解决方案和步骤：实际解决方案和步骤文本
    学生计算的总费用：学生计算得到的总费用
    实际计算的总费用：实际计算出的总费用
    学生计算的费用和实际计算的费用是否相同：是或否
    学生的解决方案和实际解决方案是否相同：是或否
    学生的成绩：正确或不正确

问题：

    我正在建造一个太阳能发电站，需要帮助计算财务。 
    - 土地费用为每平方英尺100美元
    - 我可以以每平方英尺250美元的价格购买太阳能电池板
    - 我已经谈判好了维护合同，每年需要支付固定的10万美元，并额外支付每平方英尺10美元;

    作为平方英尺数的函数，首年运营的总费用是多少。

学生的解决方案：

    设x为发电站的大小，单位为平方英尺。
    费用：
    1. 土地费用：100x美元
    2. 太阳能电池板费用：250x美元
    3. 维护费用：100,000+100x=10万美元+10x美元
    总费用：100x美元+250x美元+10万美元+100x美元=450x+10万美元

实际解决方案和步骤：
"""
# response = get_completion(prompt)
# print(response)


'''
PS：局限性
开发大模型相关应用时请务必铭记：
虚假知识：模型偶尔会生成一些看似真实实则编造的知识
在技术得以进一步改进之前，开发者可以通过Prompt设计减少幻觉发生的可能。
例如，可以先让语言模型直接引用文本中的原句，然后再进行解答。
这可以追踪信息来源，降低虚假内容的风险。
'''
prompt = f"""
告诉我华为公司生产的GT Watch运动手表的相关信息
请使用引用内容中的原句

"""
response = get_completion(prompt)
print(response)




